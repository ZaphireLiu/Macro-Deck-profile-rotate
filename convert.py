# %%
import os
import time
import json
import sqlite3 as sql

print("Note: you can always use Ctrl+C to exit this program")
print("if you don't want to continue or inputted wrong argument")
print("No change to your profile would be made until 'Convert in progress' is showed")

showRawData = False
# Should work on windows10+
sqlPath = os.environ['HOMEDRIVE'] + os.environ['HOMEPATH'] + \
          "\AppData\Roaming\Macro Deck\profiles.db"

if not os.path.exists(sqlPath):
    print("Path Error")
    while True:
        quit() # Finish this later

conn = sql.connect(sqlPath)
cur = conn.cursor()

# %%
# List all profiles
cur.execute("SELECT * FROM ProfileJson")
profileList = []
print("Profiles:")
count = 0
for i in cur.fetchall():
    profileList.append(json.loads(i[0]))
    prof = profileList[-1]
    print("Num: {} ID: {}\n----Name: {}".format(count, prof["ProfileId"], prof["DisplayName"]))
    count += 1

# Select profile
while True:
    selNum = input("Select the profile that you want to rotate by Num\nEnter 'quit' to end program: ")
    if selNum == 'quit':
        quit()
    selID = profileList[int(selNum)]["ProfileId"]
    cur.execute("SELECT * FROM ProfileJson Where JsonString Like '%\"ProfileId\":\"{}\"%'".format(selID))
    res = cur.fetchall()
    if len(res):
        break
    else:
        print("Nothing found.")

prof = json.loads(res[0][0])
# Show data
if showRawData:
    print("\n{} (ID: {}) raw data:".format(prof["DisplayName"], prof["ProfileId"]))
    for k in prof.keys():
        if k == "Folders":
            print("KEY: {} \nDATA:".format(k))
            for folder in prof["Folders"]:
                print(folder)
            continue
        print("KEY: {} \nDATA: {}".format(k, prof[k]))

print("Profile {} (ID: {}) has {} row(s) and {} column(s), {} folder(s)."\
      .format(prof["DisplayName"], prof["ProfileId"], prof["Rows"], prof["Columns"], len(prof["Folders"])))

overWrite = False
while True:
    newName = input("Input a new name for rotated profile.\nLeave blank for default name {}-Rotate: ".format(prof["DisplayName"]))
    if newName == "":
        newName = prof['DisplayName'] + "-Rotate"
    cur.execute("SELECT * FROM ProfileJson Where JsonString Like '%\"DisplayName\":\":\"{}\"%'".format(newName))
    res = cur.fetchall()
    if len(res):
        select = input("Profile {} already exists.\nDo you want to overwrite this profile? (y/n): ")
        if select == 'y' or select == 'Y':
            overWrite = True
            break
        else:
            continue
    else:
        break

# %%
print("Convert in progress...")

if overWrite:
    # remove old profile
    print("WIP")

'''
    New ID is generated by following rules:
    1. remove anything from DisplayName that isn't 0-9/A-Z/a-z/dash symbol(-) to get a new name
    2. get current UnixTime in Milliseconds
    3. ID = time + new name(in lower)
    In theory you can use any ID that's made with 0-9, a-z and dash symbol,
    but I'll just follow those rules, just in case. 
    Haven't figure out how the folders and buttons got their ID, so I won't change them for now
'''

prof['ProfileId']   = str(int(time.time() * 1000))
prof['DisplayName'] = newName

# Change setting
settingCache    = prof["Rows"]
prof["Rows"]    = prof["Columns"]
prof["Columns"] = settingCache
# Change button location
for folder in prof["Folders"]: # dict
    for button in folder["ActionButtons"]: # dict
        settingCache         = button["Position_X"]
        button["Position_X"] = button["Position_Y"]
        button["Position_Y"] = settingCache

strOut = json.dumps(prof)
# print(strOut)

print("Writing into database...")
cur.execute("INSERT INTO ProfileJson VALUES (?)", (strOut,))
conn.commit()
conn.close()
print("Done! Reboot Macro Deck and the new profile should show.")
